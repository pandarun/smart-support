# Classification Module - Environment Configuration

# Scibox API Key (REQUIRED)
# Obtain from: https://llm.t1v.scibox.tech/
SCIBOX_API_KEY=your_api_key_here

# FAQ Database Path
# Path to the VTB Belarus FAQ Excel file
FAQ_PATH=docs/smart_support_vtb_belarus_faq_final.xlsx

# Logging Configuration
# Options: DEBUG, INFO, WARNING, ERROR
LOG_LEVEL=INFO

# API Timeout (seconds)
# Maximum time to wait for Scibox API response
# Must be <2s to meet performance requirements
API_TIMEOUT=1.8

# API Retry Configuration
# Maximum number of retry attempts for transient API failures
# OpenAI client uses exponential backoff: 2s, 4s, 8s delays
# Set to 0 for development (fail fast), 3 for production
API_MAX_RETRIES=3

# Retrieval Module - Environment Configuration

# Embeddings Model
# Scibox model for semantic embeddings (bge-m3 for Russian language)
EMBEDDING_MODEL=bge-m3

# Embedding Cache Path (Optional)
# SQLite database for persisting precomputed embeddings
# If not set, embeddings are kept in memory only
# EMBEDDING_CACHE_PATH=data/cache/embeddings.db

# Retrieval Configuration
# Number of top-ranked templates to return
RETRIEVAL_TOP_K=5

# Retrieval Timeout (seconds)
# Maximum time for template retrieval (<1s requirement)
RETRIEVAL_TIMEOUT_SECONDS=1.0

# Persistent Storage Module - Environment Configuration

# Storage Backend
# Options: "sqlite" (default, file-based) or "postgres" (server-based with pg_vector)
# SQLite: Zero configuration, perfect for single-node deployment
# PostgreSQL: Better for high concurrency and large datasets (>1000 templates)
STORAGE_BACKEND=sqlite

# SQLite Configuration (when STORAGE_BACKEND=sqlite)
# Path to SQLite database file (will be created if doesn't exist)
# Default: data/embeddings.db
SQLITE_DB_PATH=data/embeddings.db

# PostgreSQL Configuration (when STORAGE_BACKEND=postgres)
# Connection parameters for PostgreSQL with pg_vector extension
# POSTGRES_HOST=localhost
# POSTGRES_PORT=5432
# POSTGRES_DATABASE=smart_support
# POSTGRES_USER=postgres
# POSTGRES_PASSWORD=your_postgres_password
# POSTGRES_POOL_SIZE=5
