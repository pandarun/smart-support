version: '3.8'

services:
  # Classification Module Service
  classification:
    build:
      context: .
      dockerfile: Dockerfile
    image: smart-support:latest
    container_name: smart-support-classification

    # Environment variables
    environment:
      - SCIBOX_API_KEY=${SCIBOX_API_KEY}
      - FAQ_PATH=/app/docs/smart_support_vtb_belarus_faq_final.xlsx
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - API_TIMEOUT=${API_TIMEOUT:-1.8}

    # Mount .env file
    env_file:
      - .env

    # Volume mounts for development
    volumes:
      - ./data/validation:/app/data/validation:ro
      - ./data/results:/app/data/results:rw
      - ./docs:/app/docs:ro

    # Network
    networks:
      - smart-support-network

    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M

    # Restart policy
    restart: unless-stopped

    # Health check
    healthcheck:
      test: ["CMD", "python", "-c", "from src.classification.faq_parser import get_faq_parser; get_faq_parser()"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s

    # Default command (can override)
    # Example: docker-compose run classification "Как открыть счет?"
    command: ["-m", "src.cli.classify", "--help"]

  # Template Retrieval Module Service
  retrieval:
    build:
      context: .
      dockerfile: Dockerfile
    image: smart-support:latest
    container_name: smart-support-retrieval

    # Environment variables
    environment:
      - SCIBOX_API_KEY=${SCIBOX_API_KEY}
      - FAQ_PATH=/app/docs/smart_support_vtb_belarus_faq_final.xlsx
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - EMBEDDING_MODEL=${EMBEDDING_MODEL:-bge-m3}
      - RETRIEVAL_TOP_K=${RETRIEVAL_TOP_K:-5}
      - RETRIEVAL_TIMEOUT_SECONDS=${RETRIEVAL_TIMEOUT_SECONDS:-1.0}
      # Persistent storage configuration
      - STORAGE_BACKEND=${STORAGE_BACKEND:-sqlite}
      - SQLITE_DB_PATH=/app/data/embeddings.db
      # PostgreSQL configuration (if STORAGE_BACKEND=postgres)
      # - POSTGRES_HOST=postgres
      # - POSTGRES_PORT=5432
      # - POSTGRES_DATABASE=smart_support
      # - POSTGRES_USER=postgres
      # - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}

    # Mount .env file
    env_file:
      - .env

    # Volume mounts for development
    volumes:
      - ./data/validation:/app/data/validation:ro
      - ./data/results:/app/data/results:rw
      - ./docs:/app/docs:ro
      # Persistent storage: Mount data directory for embeddings.db
      - ./data:/app/data:rw

    # Network
    networks:
      - smart-support-network

    # Resource limits (slightly more memory for embedding cache)
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2.5G
        reservations:
          cpus: '0.5'
          memory: 512M

    # Restart policy
    restart: unless-stopped

    # Health check
    healthcheck:
      test: ["CMD", "python", "-c", "from src.classification.faq_parser import get_faq_parser; get_faq_parser()"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 60s  # Longer startup due to embedding precomputation

    # Default command (can override)
    # Example: docker-compose run retrieval "Как открыть счет?" --category "Счета и вклады" --subcategory "Открытие счета"
    command: ["-m", "src.cli.retrieve", "--help"]

  # Future: Operator Web UI Service
  # operator-ui:
  #   build:
  #     context: ./ui
  #   ports:
  #     - "8080:8080"
  #   environment:
  #     - CLASSIFICATION_SERVICE=classification:5000
  #     - RETRIEVAL_SERVICE=retrieval:5001
  #   depends_on:
  #     - classification
  #     - retrieval

  # Optional: PostgreSQL with pg_vector extension
  # Uncomment to use PostgreSQL backend instead of SQLite
  # postgres:
  #   image: ankane/pgvector:latest
  #   container_name: smart-support-postgres
  #   environment:
  #     POSTGRES_DB: smart_support
  #     POSTGRES_USER: postgres
  #     POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
  #   ports:
  #     - "5432:5432"
  #   volumes:
  #     - postgres-data:/var/lib/postgresql/data
  #   networks:
  #     - smart-support-network
  #   restart: unless-stopped

networks:
  smart-support-network:
    driver: bridge

# Volumes for persistent data
volumes:
  validation-data:
  results-data:
  # postgres-data:  # Uncomment if using PostgreSQL
